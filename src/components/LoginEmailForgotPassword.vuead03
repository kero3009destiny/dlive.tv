
























































































import VGrecaptcha from '@/components/VGrecaptcha.vue';
import DBtn from '@/components/DBtn.vue';
import DTextField from '@/components/DTextField.vue';
import SnackbarMixin from '@/mixins/SnackbarMixin';
import { passwordValidation } from '@/utils/passwordValidation';
import SEND_RESET_PASSWORD_CODE_TO_EMAIL from '@/graphql/mutations/SendResetPasswordCodeToEmail.graphql';
import RESET_PASSWORD_WITH_EMAIL_CODE from '@/graphql/mutations/ResetPasswordWithEmailCode.graphql';
import {
  SendResetPasswordCodeToEmail,
  ResetPasswordWithEmailCode
} from '@/graphql/types';
// import AuthTokenMixin from '@/mixins/AuthTokenMixin';
// import CurrentUserMixin from '@/mixins/CurrentUserMixin';
// import ErrorCheckingMixin from '@/mixins/ErrorCheckingMixin';
import { RecaptchaError } from '@/models/error';

import VueCountdown from '@chenfengyuan/vue-countdown';
import { Component, Mixins, Emit } from 'vue-property-decorator';

@Component({
  components: {
    VGrecaptcha,
    DBtn,
    VueCountdown,
    DTextField
  }
})
export default class LoginEmailForgotPassword extends Mixins(SnackbarMixin) {
  // AuthTokenMixin,
  // CurrentUserMixin,
  // ErrorCheckingMixin,
  //   @Prop() showEmailCallback!: boolean;
  // local
  // private showResetPasswordCallback: boolean = false;
  private email: string = '';
  private emailErrors: string[] = [];
  private verifyCodeErrors: string[] = [];
  private passErrors: string[] = [];
  private confirmPassErrors: string[] = [];
  private signupLoading: boolean = false;
  private isLoading: boolean = false;
  private emailRegisterToken: string = '';
  private verificationCode: string = '';
  private pwd: string = '';
  private confirmPwd: string = '';
  private pwdMinLength: number = 8;
  private pwdMaxLength: number = 20;
  private step: number = 1;
  private verifyCodeLength: number = 6;
  private isSendShowing: boolean = true;
  private isResendShowing: boolean = false;
  private counting: boolean = false;

  get checkFields() {
    if (
      this.email &&
      this.pwd &&
      this.confirmPwd &&
      this.verificationCode &&
      this.emailErrors.length === 0 &&
      this.passErrors.length === 0 &&
      this.confirmPassErrors.length === 0 &&
      this.verifyCodeErrors.length === 0
    ) {
      return false;
    } else {
      return true;
    }
  }
  public countdown() {
    this.isSendShowing = false;
    this.isResendShowing = false;
    this.counting = true;
  }

  public countdownend() {
    this.counting = false;
    this.isResendShowing = true;
  }

  public onPwdInput(pwd: string) {
    this.pwd = pwd;
    const passwordError = passwordValidation(pwd);
    if (passwordError !== '') {
      this.passErrors = [this.$t(passwordError) as string];
    } else {
      this.passErrors = [];
    }
    this.confirmPwdInput();
  }
  public confirmPwdInput() {
    if (this.pwd !== this.confirmPwd) {
      this.confirmPassErrors = [
        this.$t('LoginEmailRegisterCallback.PasswordsMatch') as string
      ];
    } else {
      this.confirmPassErrors = [];
    }
  }
  public onEmailVerifyCodeInput(code: string) {
    this.verificationCode = code;
    if (this.verificationCode.length !== this.verifyCodeLength) {
      this.verifyCodeErrors = [
        this.$t('LoginEmailRegisterCallback.InvalidVerificationCode') as string
      ];
    } else {
      this.verifyCodeErrors = [];
    }
  }

  public backClicked() {
    // this.showResetPasswordCallback = !this.showResetPasswordCallback;
    this.$emit('backClicked');
  }

  @Emit('closeDialog')
  public closing() {
    // NOOP
  }
  public onEmailInput(email: string) {
    this.email = email;
    // FIXME(@ryan): use email text field
    // eslint-disable-next-line no-useless-escape
    const re = /^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
    const validEmail = re.test(String(this.email).toLowerCase());
    if (!validEmail) {
      this.emailErrors = [
        this.$t('LoginEmailRegisterCallback.EnterValidEmail') as string
      ];
    } else {
      this.emailErrors = [];
    }
  }
  public async sendResetCodeClicked() {
    if (this.emailErrors.length !== 0) {
      return;
    }
    this.isLoading = true;
    try {
      const recaptcha = await (this.$refs.grecaptcha as VGrecaptcha).execute();
      if (recaptcha === null) {
        throw new RecaptchaError();
      }

      const variables: SendResetPasswordCodeToEmail.Variables = {
        email: this.email,
        recaptchaToken: recaptcha
      };
      const mutation = SEND_RESET_PASSWORD_CODE_TO_EMAIL;
      const { data } = await this.$apollo.mutate<
        SendResetPasswordCodeToEmail.Mutation
      >({
        mutation,
        variables
      });
      this.isLoading = false;
      const resp = data.sendResetPasswordCodeToEmail;
      this.$handleError(resp.err, mutation, variables);
      this.$success('LoginEmailRegisterCallback.MessageSent');
      this.countdown();
    } catch (err) {
      this.isLoading = false;
      throw err;
    }
  }

  public async resetClicked() {
    this.signupLoading = true;
    try {
      const variables: ResetPasswordWithEmailCode.Variables = {
        email: this.email,
        code: this.verificationCode,
        newPassword: this.confirmPwd
      };
      const mutation = RESET_PASSWORD_WITH_EMAIL_CODE;
      const { data } = await this.$apollo.mutate<
        ResetPasswordWithEmailCode.Mutation
      >({
        mutation,
        variables
      });
      this.signupLoading = false;
      const resp = data.resetPasswordWithEmailCode;
      this.$handleError(resp, mutation, variables);
      this.$success('LoginForgotPassword.PasswordResetSuccess');
      this.closing();
    } catch (err) {
      this.signupLoading = false;
      throw err;
    }
  }
}
