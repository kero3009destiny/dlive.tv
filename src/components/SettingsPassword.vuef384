

















































































import MeMixin from '@/mixins/MeMixin';
import SnackbarMixin from '@/mixins/SnackbarMixin';
import DTextField from '@/components/DTextField.vue';
import DBtn from '@/components/DBtn.vue';
import { resetPasswordWithOldPassword } from '@/apollo/mutation/settings';
import { Component, Mixins } from 'vue-property-decorator';
import { passwordValidation } from '@/utils/passwordValidation';
import { RegistrationType } from '@/graphql/types';
import { existsInArr } from '@/utils/search';
import { namespace } from 'vuex-class';

const accessTokenModule = namespace('accessToken');

@Component({
  components: {
    DTextField,
    DBtn
  }
})
export default class SettingsPassword extends Mixins(SnackbarMixin, MeMixin) {
  get canUpdatePassword() {
    return (
      this.hasEmail &&
      this.passwordErrors.length === 0 &&
      this.passwordConfirmErrors.length === 0 &&
      this.newPassword !== '' &&
      this.confirmNewPassword !== ''
    );
  }

  get isEmailRegister() {
    if (this.me !== null && this.me.private !== null) {
      return existsInArr(
        this.me.private.registrationType,
        RegistrationType.Email
      );
    }
    return false;
  }

  get hasEmail() {
    if (this.me !== null && this.me.private !== null) {
      return this.me.private.email !== undefined;
    }
    return false;
  }

  get passwordConfirmErrors() {
    if (this.confirmNewPassword !== this.newPassword) {
      return [this.$t('SettingsPassword.PasswordShouldMatch')];
    } else {
      return [];
    }
  }

  // Local
  public oldPassword = '';
  public newPassword = '';
  public confirmNewPassword = '';
  public passwordErrors: string[] = [];
  public updateLoading: boolean = false;

  @accessTokenModule.Mutation('setAccessToken')
  private setAccessToken!: (token: string) => void;

  public async updatePassword() {
    const accessToken = await resetPasswordWithOldPassword(
      this,
      this.oldPassword,
      this.newPassword
    );
    if (accessToken !== undefined && accessToken !== null) {
      this.setAccessToken(accessToken);
      this.clearInput();
    }
  }

  public onPwdInput() {
    const passwordError = passwordValidation(this.newPassword);
    if (passwordError !== '') {
      this.passwordErrors = [this.$t(passwordError) as string];
    } else {
      this.passwordErrors = [];
    }
  }

  public clearInput() {
    this.oldPassword = '';
    this.newPassword = '';
    this.confirmNewPassword = '';
  }
}
