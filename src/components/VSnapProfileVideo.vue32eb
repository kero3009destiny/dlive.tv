




































































































import { ProfileVideoSnapFrag, DeleteVideo } from '@/graphql/types';
import { videoDelete } from '@/apollo/mutation/livestreamProfile';
import MagicMqMixin from '@/mixins/MagicMqMixin';
import SnackbarMixin from '@/mixins/SnackbarMixin';
import DToken from '@/components/DToken.vue';
import DSnap from '@/components/DSnap.vue';
import DMenu from '@/components/DMenu.vue';
import DMenuItem from '@/components/DMenuItem.vue';
import DDialog from '@/components/DDialog.vue';
import DBtn from '@/components/DBtn.vue';
import { Component, Mixins, Prop } from 'vue-property-decorator';
import MeMixin from '@/mixins/MeMixin';

@Component({
  components: {
    DToken,
    DSnap,
    DMenu,
    DMenuItem,
    DDialog,
    DBtn
  }
})
export default class VSnapProfileVideo extends Mixins(
  SnackbarMixin,
  MagicMqMixin,
  MeMixin
) {
  get isSelf() {
    if (this.video !== null && this.me !== null) {
      return this.me.displayname === this.video.creator.displayname;
    } else {
      return false;
    }
  }

  get params() {
    return { permlink: this.video.permlink };
  }

  @Prop({
    required: true
  })
  public video!: ProfileVideoSnapFrag.Fragment;

  @Prop({
    default: 0,
    required: false
  })
  public ranking!: number;

  public videoSnapMenuShow: boolean = false;
  public shouldShowEdit: boolean = false;
  public showDownloadTip: boolean = false;
  public deleting: boolean = false;
  public shouldShowDeleteDialog: boolean = false;

  public goToPost() {
    this.$store.commit('userMeta/setPostRank', this.ranking.toString());
    this.$store.commit('userMeta/setPostPrevPage', this.$route.name);
  }

  public toggleEditClick() {
    this.shouldShowEdit = !this.shouldShowEdit;
  }

  public deleteClicked() {
    this.shouldShowEdit = false;
    this.shouldShowDeleteDialog = true;
  }

  public async confirmDelete() {
    this.deleting = true;
    const variables: DeleteVideo.Variables = {
      permlink: this.video.permlink
    };
    const resp = await videoDelete(this, variables);
    if (resp === undefined || resp.err !== null) {
      return;
    }
    this.$emit('videoDeleted', this.video.permlink);
    this.deleting = false;
    this.shouldShowDeleteDialog = false;
  }
}
