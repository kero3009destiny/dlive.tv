

























import LoginRegisterFinal from '@/components/LoginRegisterFinal.vue';
import TwoFAPopup from '@/components/TwoFAPopup.vue';
import { Component, Mixins, Prop, Emit } from 'vue-property-decorator';
import { ThirdParty, THIRD_PARTY_OPTIONS } from '@/utils/thirdParty';
import LOGIN_WITH_FB from '@/graphql/mutations/LoginWithFB.graphql';
import LOGIN_WITH_YT from '@/graphql/mutations/LoginWithYT.graphql';
import LOGIN_WITH_TW from '@/graphql/mutations/LoginWithTW.graphql';
import {
  LoginWithFb,
  LoginWithYt,
  LoginWithTw,
  LoginWithThirdParty
} from '@/graphql/types';
import SnackbarMixin from '@/mixins/SnackbarMixin';
import { optionsValidator } from '@/utils/prop';
import { namespace } from 'vuex-class';
import { DocumentNode } from 'graphql';
import { loginRegisterNotification } from '@/web-notification';
import { redirectToAndroid } from '@/utils/useragent';

const accessTokenModule = namespace('accessToken');

@Component({
  components: {
    LoginRegisterFinal,
    TwoFAPopup
  }
})
export default class LoginThirdParty extends Mixins(SnackbarMixin) {
  @Prop({
    required: true,
    type: String,
    default: '/'
  })
  public redirectUrl!: string;

  get stepOne() {
    return this.step === 0;
  }

  get stepTwo() {
    return this.step === 1;
  }

  get stepThree() {
    return this.step === 2;
  }

  get stepFour() {
    return this.step === 3;
  }

  @accessTokenModule.Mutation('setAccessToken')
  public setAccessToken!: (token: string) => void;
  @Prop({
    required: true,
    type: String
  })
  public code!: string;
  @Prop({
    required: true,
    type: String,
    validator: optionsValidator(THIRD_PARTY_OPTIONS)
  })
  public thirdParty!: ThirdParty;
  // local
  public step: 0 | 1 | 2 | 3 = 0;
  public accessToken: string = '';
  public twoFAShow: boolean = false;
  public twofactorToken: string | null = '';

  private signupLoading: boolean = false;

  public mounted() {
    if (
      redirectToAndroid(
        `dlive://dlive.tv/?state=${this.thirdParty}&code=${this.code}`,
        !this.$route.query.gxc,
        this.sendToken
      )
    ) {
      return;
    }
    this.sendToken();
  }

  public async sendToken() {
    try {
      // XXX(@ryanli): used `!` here because https://github.com/Microsoft/TypeScript/issues/18362
      let resp!: LoginWithThirdParty.Fragment;
      let mutation!: DocumentNode;
      const variables = {
        code: this.code
      };
      switch (this.thirdParty) {
        case 'fb': {
          resp = await this.loginFb();
          mutation = LOGIN_WITH_FB;
          break;
        }
        case 'yt': {
          resp = await this.loginYt();
          mutation = LOGIN_WITH_YT;
          break;
        }
        case 'twitch': {
          resp = await this.loginTw();
          mutation = LOGIN_WITH_TW;
          break;
        }
      }
      if (resp.err && resp.err.code === 7101) {
        this.twoFAShow = true;
        this.twofactorToken = resp.twofactorToken;
        return;
      }
      // console.log(resp);
      this.$handleError(resp.err, mutation, variables);
      if (resp.accessToken === null) {
        this.$handleInconsistentError(
          resp,
          ['accessToken'],
          mutation,
          variables
        );
        return; // XXX(@ryanli): This is only for typescript syntax, since the line above always throw error
      }
      if (resp.me === null) {
        // new login, should register
        this.accessToken = resp.accessToken;
        this.step = 1;
      } else {
        if (resp.me.private === null || resp.me.private.accessToken === '') {
          this.$handleInconsistentError(
            resp,
            ['private', 'private.accessToken'],
            mutation,
            variables
          );
          return; // XXX(@ryanli): This is only for typescript syntax, since the line above always throw error
        }
        this.setAccessToken(resp.me.private.accessToken);
        this.closing();
        loginRegisterNotification();
        this.$success('LoginEmailCallback.LoginSuccess');
        setTimeout(() => {
          this.$router.replace(this.redirectUrl);
        }, 1000);
      }
    } catch (err) {
      this.closing();
      throw err;
    }
  }

  @Emit('finished')
  public closing() {
    // NOOP
  }

  private async loginFb() {
    const { data } = await this.$apollo.mutate<LoginWithFb.Mutation>({
      mutation: LOGIN_WITH_FB,
      variables: {
        code: this.code
      }
    });
    return data.loginWithFacebook;
  }

  private async loginYt() {
    const { data } = await this.$apollo.mutate<LoginWithYt.Mutation>({
      mutation: LOGIN_WITH_YT,
      variables: {
        code: this.code
      }
    });
    return data.loginWithGoogle;
  }

  private async loginTw() {
    const { data } = await this.$apollo.mutate<LoginWithTw.Mutation>({
      mutation: LOGIN_WITH_TW,
      variables: {
        code: this.code
      }
    });
    return data.loginWithTwitch;
  }
}
